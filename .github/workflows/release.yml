name: Publish to Docker and PyPI

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  fetch_version:
    name: Fetch release version
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

  publish_docker_image:
    name: Build & Publish Docker image
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=registry,ref=ghcr.io/python-discord/olli:main
          cache-to: type=inline
          tags: |
            ghcr.io/python-discord/olli:latest
            ghcr.io/python-discord/olli:${{ needs.fetch_version.outputs.version }}
  
  publish_pypi_package:
    name: Build & Publish PyPI package
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies using poetry
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi

      - name: Build package using poetry
        run: poetry build

      - name: Publish package with Poetry
        run: poetry publish
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
